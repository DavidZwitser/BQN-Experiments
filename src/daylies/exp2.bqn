‚ü®c‚áêcolor, win‚áêwindow, d‚áêdraw, rf‚áêraylib, m‚áêmouse, key‚ü©‚Üêr‚Üê ‚Ä¢Import "../../rayed-bqn/rayed.bqn"

node_size ‚Üê 50
gw‚Äøgh‚Üêgs‚Üê √∑‚üúnode_size sw‚Äøsh‚Üêsize‚Üê ‚àæÀú1200
win.SetSize size

_OnStart ‚Üê {System _ùï£ ùï©:
	System @
}

shapes ‚Üê ‚ü®
	[1‚Äø1‚Äø1‚Äø1]

	[1‚Äø0
	 1‚Äø0
	 1‚Äø1]

	[1‚Äø0
	 1‚Äø1
	 0‚Äø1]

	[1‚Äø1‚Äø1
	 0‚Äø1‚Äø0]

	[1‚Äø1
	 1‚Äø1]
‚ü©

Block ‚Üê {ùïä:
	shape ‚Üê shapes ‚äëÀú ‚Ä¢rand.Range ‚â†shapes
	width ‚Üê ‚â†shape
	x ‚Üê width + ‚Ä¢rand.Range gw-2 √ó width
	y‚Üê0

	Update ‚áê {ùïä tick:
		y +‚Ü© tick
		{ x (0‚ä∏‚åà(node_size√ógw-width)‚ä∏‚åä)‚àò+‚Ü© ùï©√ónode_size }¬® {ùï© ‚äë 1‚Äø¬Ø1}¬® /key.IsPressed¬® key.right‚Äøkey.left
		{key.IsPressed key.space ? shape ‚åΩ‚àò‚çâ‚Ü© ;@}
	}
	Draw ‚áê {ùïä:
		{c.gray d.Rectangle (node_size√óx‚Äøy+ùï©) (‚ä£‚âç+) 0.9√ónode_size }¬® ‚Üï‚àò‚â¢‚ä∏(-‚üú1‚ä∏√ó‚óã‚•ä) shape
	}
}

clock ‚Üê r.StartClock@
game_clock ‚Üê 0
fall ‚Üê Block@
PerFrame ‚Üê {ùïä:
	clock.Tick@

	game_clock +‚Ü© tick ‚Üê (clock.Time@) > 0.3√ógame_clock
	fall.Update tick

	fall.Draw@
} d._withCanvas_ c.white

System ‚Üê PerFrame‚Ä¢_While_(¬¨r.window.ShouldClose) _OnStart
System r.window._openAs "example"
